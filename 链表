//=====================================================================================================
//  头文件
#pragma once
#include <stdio.h>
#include <malloc.h>
#define LIST_INIT_SIZE 100   //  线性表存储空间的初始分配量
#define LISTINCREMENT 10     //  线性表存储空间的分配增量
#define TRUE 1
#define OK 1
#define ERROR 0
#define FALSE 0

typedef struct LNode  //  结点类型
{
	int data;
	struct LNode* next;
}LNote, *Link, *Position;

typedef struct         //  链表类型
{
	Link head, tail;   //  分别指向线性链表中的头结点和最后一个结点
	int len;           //  指示线性链表中数据元素的个数
}LinkList;

int MakeNote(Link& p, int e);
//  分配由 p 指向的值为 e 的结点，并返回 OK；若分配失败，则返回ERROR
void FreeNode(Link& p);
//  释放 p 所指结点


Link InitList(LinkList &L, int n);
//  构造一个空的线性链表 L     头插法  尾插法
void DestroyList(LinkList& L);
//  销毁线性链表L，L不再存在
void ClearList(LinkList& L);
//  将线性链表L重置为空表，并释放原链表的结点空间
void InsFirst(Link h, Link s);
//  已知h指向线性链表的头结点，将s所指结点插入在第一个结点之前
Link DelFirst(Link h, Link& q);
//  已知h指向线性链表的头结点，删除链表中的第一个结点并以q返回
void Append(LinkList& L, Link s);
//  将指针s所指（彼此以指针相连）的一串结点链接在线性链表L的最后一个结点
Link Remove(LinkList& L, Link& q);
//  删除线性链表L中的尾结点并以q返回，改变链表L的尾指针指向新的尾结点
void InsBefore(LinkList& L, Link& p, Link s);
//  已知p指向线性链表L中的一个结点，将s所指结点插入在p所指结点之前
//  并修改指针p指向新插入的结点
void InsAfter(LinkList& L, Link& p, Link s);
//  已知p指向线性链表L中的一个结点，将s所指结点插入在p所指结点之后
//  并修改指针p指向新插入的结点
void SetCurElem(Link& p, int e);
//  已知p指向线性链表中的一个结点，用e更新p所指结点中数据元素的值
int GetCurElem(Link p);
//  已知p指向线性链表中的一个结点，返回p所指结点中数据元素的值
int ListEmpty(LinkList L);
//  若线性链表L为空表，则返回TRUE，否则返回FALSE
int ListLength(LinkList L);
//  返回线性链表中元素个数
Link Gethead(LinkList L);
//  返回线性链表L中链表中头结点的位置
Link GetLast(LinkList L);
//  返回线性链表L中链表中最后一个结点的位置
Link PirorPos(LinkList L, Link p);
//  已知p指向线性链表L中的一个结点，返回p所指结点的直接前驱的位置，
//  若无前驱，则返回NULL；
Link NextPos(LinkList L, Link p);
//  已知p指向线性链表L中的一个结点，返回p所指结点的直接后继的位置，
//  若无后继，则返回NULL；
int LocatePos(LinkList L, int i, Link& p);
//  返回p指示线性链表L中第i个结点的位置并返回OK，i值不合法时返回ERROR
Link LocateElem(LinkList L, int e, int(*compare(int, int)));
//  返回线性链表L中第1个与e满足函数compare()判定关系的元素的位置
//  若不存在这样的元素，则返回NULL
int ListTraverse(LinkList L, int(*visit)(Link));
//  依次对L的每个元素调用函数visit()。一旦visit()失败，则操作失败
int visit(Link p);  //  定义：visit函数
int ListInsert_L(LinkList& L, int i, int e);  //   Function-update
   //  在带头结点的单链线性表L的第i个元素之前插入元素e
   
//=====================================================================================================
//  函数文件
#define _CRT_SECURE_NO_WARNINGS 1
#include "Head.h"

int compare(int x, int y)
{
	if (x == y)
		return OK;
	else
		return FALSE;
}

int visit(Link p)
{
	if (printf(" %d", p->data))
		return OK;         //  访问结点，成功
	else
		return FALSE;      //  访问结点，失败
}

int MakeNote(Link& p, int e)
//  分配由 p 指向的值为 e 的结点，并返回 OK；若分配失败，则返回ERROR
{
	p = (Link)malloc(sizeof(LNode));   //  分配结点
	if (!p)
	{
		return ERROR;       //  分配失败
	}
	p->data = e;   //  存储数据
	return OK;  //  分配成功
}

void FreeNode(Link& p)
//  释放 p 所指结点
{
	free(p);
}

Link InitList(LinkList& L, int n)                 //    
//  构造一个空的线性链表 L   头插法
{
	int i = 0;
	L.head = (Link)malloc(sizeof(LNode));//  head 指向头结点  tail 指向尾结点
	L.head->next = NULL;     //   建立一个带头结点的单链表
	L.tail = L.head;                     //  此时 头结点 与 尾结点 相同
	L.len = 0;                 //  此时，链表长度为 零

	////   头插法
	//for (i = 0; i < n; i++)
	//{
	//	Link p = (Link)malloc(sizeof(LNote));     //   申请空间
	//	if (p == NULL)
	//	{
	//		printf("申请内存空间失败\n");
	//		break;
	//	}
	//	scanf("%d", &p->data);        //  输入数据
	//	p->next = L.head->next;     //  p结点 next 为  上一轮循环生成 的 结点
	//	L.tail = p;                //  改变尾结点
	//	L.head->next = p;         //  头结点 衔接 p结点(本轮结点)
	//	L.len++;                 //  链表长度 加 一
	//}

	//   尾插法
	for (i = 0; i < n; i++)
	{
		Link p = (Link)malloc(sizeof(LNote));
		if (p == NULL)
		{
			printf("申请内存空间失败\n");
			break;
		}
		scanf("%d", &p->data);
		L.tail->next = p;              //  尾结点 衔接 新结点
		p->next = NULL;               //   新结点 next  置为 NULL
		L.tail = p;                   //   尾结点 改为  新结点
		L.len++;                      //   链表长度  加 一
	}

	//L.len++;                 //   链表长度   创建链表  无实际结点
	return L.head;
}

void DestroyList(LinkList& L)
//  销毁线性链表L，L不再存在
{
	Link p = L.head;    //   作为移动坐标，所指向的结点将在本次循环被销毁
	while (L.head)
	{
		p = L.head;             //  指向头结点
		L.head = L.head->next;  //  指向下一轮循环要销毁的结点
		free(p);                //  释放本轮结点
	}
	if (p == NULL)
		printf("链表销毁不成功\n");
	else
	{
		printf("链表销毁失败！！！\n");
	}
}

void ClearList(LinkList& L)
//  将线性链表L重置为空表，并释放原链表的结点空间
{
	Link p, q;
	p = L.head->next;  //  指向第一个结点
	while (p)
	{
		q = p->next;  //  令 q 指向下一轮循环要释放的结点
		free(p);     //  释放本结点
		p = q;        //  令 p 指向下一轮循环要释放的结点
	}
	L.head->next = NULL;      //   重置头结点
	L.tail = L.head;          //   重置尾结点
	L.len = 0;                //   重置链表长度
	if (p == NULL && L.head == NULL)
		printf("链表L重置成功\n");
	else
		printf("链表L重置失败！！！\n");
}

void InsFirst(Link h, Link s)
//  已知h指向线性链表的头结点，将s所指结点插入在第一个结点之前
{
	s->next = h->next;   //  令 s 指向第一个结点 
	h->next = s;         //  令 头结点 指向 s 结点  ， 此时，s 成为第一个结点  第一个结点降为第二个结点
}

Link DelFirst(Link h, Link& q)
//  已知h指向线性链表的头结点，删除链表中的第一个结点并以q返回
{
	Link p;
	p = h->next;     //  p指向第一个结点
	h->next = p->next;   //  头结点 指向 第二个结点  此时  第一个结点 被删除
	q = p;                   //  通过 q 返回 第一个结点
	return q;
}

void Append(LinkList& L, Link s)
//  将指针s所指（彼此以指针相连）的一串结点链接在线性链表L的最后一个结点
{
	L.tail->next = s;   //  尾结点 指向 s 结点
	L.len++;             //  增加链表长度
	while (L.tail)       //  判断条件即 尾结点 是否 为 NULL
	{
		s = s->next;     //  s指向下一个结点
		L.tail = s->next;  //  尾结点 指向s指向的结点
		L.len++;         //  增加链表长度
	}
}

Link Remove(LinkList& L, Link& q)
//  删除线性链表L中的尾结点并以q返回，改变链表L的尾指针指向新的尾结点
{
	Link p = NULL;
	q = L.head;               //   指向头结点
	if (q->next)              //   错误判断   链表长度为 0 
		return FALSE;
	while (q->next != NULL)   //   q 为 非 尾结点
	{
		p = q;                //  p 指向 本轮 循环的 q 结点
		q = q->next;
	}
	p->next = NULL;          //   p 结点 指针域 置为 空
	L.tail = p;              //   尾结点  前移
	L.len--;                 //   链表长度 减 一
	return q;
}

void InsBefore(LinkList& L, Link& p, Link s)
//  已知p指向线性链表L中的一个结点，将s所指结点插入在p所指结点之前
//  并修改指针p指向新插入的结点
{
	Link q = L.head;        //  q结点  遍历  至   p结点
	while (q->next != p)    //  判断条件  q 指向 p   即 p 的 前 一个结点
	{
		q = q->next;        //  q 后移
	}
	q->next = s;            //  s结点 插在 p 结点 之前
	s->next = p;            //  链接 后续结点
	p = s;                  //  p 结点 指向 新结点
}

void InsAfter(LinkList& L, Link& p, Link s)
//  已知p指向线性链表L中的一个结点，将s所指结点插入在p所指结点之后
//  并修改指针p指向新插入的结点
{
	s->next = p->next;      //  s结点 指针域  指向  p 结点 后 一个结点
	p->next = s;            //  p结点 指针域  指向  s结点    完成 插入 操作
	p = s;                  //  p 结点 指向 新结点
}

void SetCurElem(Link& p, int e)
//  已知p指向线性链表中的一个结点，用e更新p所指结点中数据元素的值
{
	p->data = e;
}

int GetCurElem(Link p)
//  已知p指向线性链表中的一个起点，返回p所指结点中数据元素的值
{
	return p->data;
}

int ListEmpty(LinkList L)
//  若线性链表L为空表，则返回TRUE，否则返回FALSE
{
	if (L.head->next == NULL)
		return TRUE;
	else
		return FALSE;
}

int ListLength(LinkList L)
//  返回线性链表中元素个数
{
	Link p;
	L.len = 0;
	p = L.head;
	while (p->next != NULL)   //  判断 p结点 非 尾结点  即 不计尾结点  ；以  抵消  计入了  头结点
	{
		p = p->next;
		L.len++;
	}
	return L.len;
}

Link Gethead(LinkList L)
//  返回线性链表L中链表中头结点的位置
{
	return L.head;
}

Link GetLast(LinkList L)
//  返回线性链表L中链表中最后一个结点的位置
{
	return L.tail;
}

Link PirorPos(LinkList L, Link p)
//  已知p指向线性链表L中的一个结点，返回p所指结点的直接前驱的位置，
//  若无前驱，则返回NULL；
{
	if (p == L.head)      //  若无前驱，返回NULL
		return NULL;
	Link q;
	q = L.head;
	while (q->next != p)  //  判断 q 后继是否为 p
	{
		q = q->next;    //  q 后移
	}
	return q;           //  返回 q
}

Link NextPos(LinkList L, Link p)
//  已知p指向线性链表L中的一个结点，返回p所指结点的直接后继的位置，
//  若无后继，则返回NULL；
{
	if (p->next == NULL)  //  若无后继，返回NULL
		return NULL;
	else
		return p->next;  //  返回 p 所指结点之后继结点
}

int LocatePos(LinkList L, int i, Link& p)
//  返回p指示线性链表L中第i个结点的位置并返回OK，i值不合法时返回ERROR
{
	p = L.head;
	int j = 0;
	if (i<0 || i>L.len)    //  i值应在（0，len]之间
		return ERROR;
	for (j = 0; j < i; j++)     //  循环 i 次
	{
		p = p->next;  //  p 指向下一个结点
	}
	return OK;
}

Link LocateElem(LinkList L, int e, int(*compare(int, int)))
//  返回线性链表L中第1个与e满足函数compare()判定关系的元素的位置
//  若不存在这样的元素，则返回NULL
{
	int a = 0;
	Link p = L.head->next;
	while (p != NULL)
	{
		a = p->data;
		if (*compare(e, a))   //  如果compare为真，则返回该元素的位置
			return p;
		p = p->next;         //  p移向下一个结点
	}
	return NULL;    //  若不存在，则返回NULL
}

int ListTraverse(LinkList L, int(*visit)(Link))
//  依次对L的每个元素调用函数visit()。一旦visit()失败，则操作失败
{
	Link p = L.head->next;     //  指向第一个结点
	while (p)
	{
		if ((*visit)(p))       //   访问 p  
			p = p->next;       //   p  移向 下一个结点
		else
			return FALSE;
	}
	return OK;
}


//===================================================================================================================
//    主体文件
#define _CRT_SECURE_NO_WARNINGS 1
#include "Head.h"

int main()
{
	LinkList L;
	int n = 3;
	InitList(L, n);
	ListTraverse(L, visit);
	ListInsert_L(L, 2, 9);
	printf("\n");
	ListTraverse(L, visit);
	return 0;
}
